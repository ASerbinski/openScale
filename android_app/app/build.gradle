apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("../../openScale.keystore")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def keystoreLightPropertiesFile = rootProject.file("../../openScale_light.keystore")
def keystoreLightProperties = new Properties()
keystoreLightProperties.load(new FileInputStream(keystoreLightPropertiesFile))

def keystoreProPropertiesFile = rootProject.file("../../openScale_pro.keystore")
def keystoreProProperties = new Properties()
keystoreProProperties.load(new FileInputStream(keystoreProPropertiesFile))

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.health.openscale"
        testApplicationId "com.health.openscale.test"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 48
        versionName "2.2.0"
        archivesBaseName = "openScale-$versionName"

        manifestPlaceholders = [
                appIcon: "@drawable/ic_launcher_openscale"
        ]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file(rootDir.getCanonicalPath() + '/' + keystoreProperties['releaseKeyStore'])
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storePassword keystoreProperties['releaseStorePassword']
        }

        light {
            storeFile file(rootDir.getCanonicalPath() + '/' + keystoreLightProperties['releaseKeyStore'])
            keyAlias keystoreLightProperties['releaseKeyAlias']
            keyPassword keystoreLightProperties['releaseKeyPassword']
            storePassword keystoreLightProperties['releaseStorePassword']
        }

        pro {
            storeFile file(rootDir.getCanonicalPath() + '/' + keystoreProProperties['releaseKeyStore'])
            keyAlias keystoreProProperties['releaseKeyAlias']
            keyPassword keystoreProProperties['releaseKeyPassword']
            storePassword keystoreProProperties['releaseStorePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        light {
            manifestPlaceholders = [
                    appIcon: "@drawable/ic_launcher_openscale_light"
            ]
            applicationIdSuffix ".light"
            versionNameSuffix "-light"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.light
        }
        pro {
            manifestPlaceholders = [
                    appIcon: "@drawable/ic_launcher_openscale_pro"
            ]
            applicationIdSuffix ".pro"
            versionNameSuffix "-pro"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.pro
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.2.0-alpha06'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    // Simple CSV
    implementation 'com.j256.simplecsv:simplecsv:2.3'
    // Blessed Android
    implementation 'com.github.weliem:blessed-android:1.15'
    // CustomActivityOnCrash
    implementation 'cat.ereza:customactivityoncrash:2.2.0'
    // AppIntro
    implementation 'com.github.AppIntro:AppIntro:6.0.0-alpha3'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.71'
    // Room
    implementation 'androidx.room:room-runtime:2.2.5'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'
    androidTestImplementation 'androidx.room:room-testing:2.2.5'
    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // Local unit tests
    testImplementation 'junit:junit:4.12'
    // Instrumented unit tests
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
